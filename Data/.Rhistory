kw_2014 = sum(kw_2014, na.rm = TRUE),
kw_2015 = sum(kw_2015, na.rm = TRUE),
kw_2016 = sum(kw_2016, na.rm = TRUE),
kw_2017 = sum(kw_2017, na.rm = TRUE),
kw_2018 = sum(kw_2018, na.rm = TRUE),
kw_2019 = sum(kw_2019, na.rm = TRUE),
kw_2020 = sum(kw_2020, na.rm = TRUE),
kw_2021 = sum(kw_2021, na.rm = TRUE),
kw_2022 = sum(kw_2022, na.rm = TRUE)
) %>%
mutate(kw_tot =
kw_b2005+
kw_2005 +
kw_2006 +
kw_2007 +
kw_2008 +
kw_2009 +
kw_2010 +
kw_2011 +
kw_2012 +
kw_2013 +
kw_2014 +
kw_2015 +
kw_2016 +
kw_2017 +
kw_2018 +
kw_2019 +
kw_2020 +
kw_2021 +
kw_2022) %>%
st_drop_geometry()
cantons_kw_installed <- left_join(cantons, cantons_kw_installed_nongeo, by=c("KANTONSNUM" = "knr"))
ch_kw_installed <- ch %>%
mutate(kw_b2005 = sum(muns_kw_installed$kw_b2005, na.rm = TRUE),
kw_2005 = sum(muns_kw_installed$kw_2005, na.rm = TRUE),
kw_2006 = sum(muns_kw_installed$kw_2006, na.rm = TRUE),
kw_2007 = sum(muns_kw_installed$kw_2007, na.rm = TRUE),
kw_2008 = sum(muns_kw_installed$kw_2008, na.rm = TRUE),
kw_2009 = sum(muns_kw_installed$kw_2009, na.rm = TRUE),
kw_2010 = sum(muns_kw_installed$kw_2010, na.rm = TRUE),
kw_2011 = sum(muns_kw_installed$kw_2011, na.rm = TRUE),
kw_2012 = sum(muns_kw_installed$kw_2012, na.rm = TRUE),
kw_2013 = sum(muns_kw_installed$kw_2013, na.rm = TRUE),
kw_2014 = sum(muns_kw_installed$kw_2014, na.rm = TRUE),
kw_2015 = sum(muns_kw_installed$kw_2015, na.rm = TRUE),
kw_2016 = sum(muns_kw_installed$kw_2016, na.rm = TRUE),
kw_2017 = sum(muns_kw_installed$kw_2017, na.rm = TRUE),
kw_2018 = sum(muns_kw_installed$kw_2018, na.rm = TRUE),
kw_2019 = sum(muns_kw_installed$kw_2019, na.rm = TRUE),
kw_2020 = sum(muns_kw_installed$kw_2020, na.rm = TRUE),
kw_2021 = sum(muns_kw_installed$kw_2021, na.rm = TRUE),
kw_2022 = sum(muns_kw_installed$kw_2022, na.rm = TRUE)) %>%
mutate(kw_tot =
kw_b2005 +
kw_2005 +
kw_2006 +
kw_2007 +
kw_2008 +
kw_2009 +
kw_2010 +
kw_2011 +
kw_2012 +
kw_2013 +
kw_2014 +
kw_2015 +
kw_2016 +
kw_2017 +
kw_2018 +
kw_2019 +
kw_2020 +
kw_2021 +
kw_2022) %>%
select(NAME, EINWOHNERZ, starts_with("kw"))
# solar energy potential
potential_muns <- potentials %>%
inner_join(muns, by=c("MunicipalityNumber" = "BFS_NUMMER")) %>%
select(MunicipalityNumber,
knr,
Scenario1_RoofsOnly_PotentialSolarElectricity_GWh,
Scenario3_RoofsFacades_PotentialSolarElectricity_GWh) %>%
rename(p_rf = Scenario1_RoofsOnly_PotentialSolarElectricity_GWh,
p_rf_fac = Scenario3_RoofsFacades_PotentialSolarElectricity_GWh)
potential_cantons <- potential_muns %>%
group_by(knr) %>%
summarize(p_rf = sum(p_rf),
p_rf_fac = sum(p_rf_fac))
muns_installed_pot <- left_join(muns_kw_installed, potential_muns, by=c("BFS_NUMMER" = "MunicipalityNumber"))
cantons_installed_pot <- left_join(cantons_kw_installed, potential_cantons, by=c("KANTONSNUM" = "knr"))
ch_installed_pot <- ch_kw_installed %>%
mutate(p_rf = sum(potential_muns$p_rf),
p_rf_fac = sum(potential_muns$p_rf_fac))
# Joining the potential to the typology
typology_unproc <- left_join(typology_unproc, potentials, by=c("GDE_NO" = "MunicipalityNumber"))
potential_typ <- typology_unproc %>%
group_by(TYP) %>%
summarize(p_rf = sum(Scenario1_RoofsOnly_PotentialSolarElectricity_GWh, na.rm=T),
p_rf_fac = sum(Scenario3_RoofsFacades_PotentialSolarElectricity_GWh, na.rm=T)
) %>%
st_drop_geometry()
typ_installed_pot <- left_join(typ_kw_installed, potential_typ, by="TYP")
# German --> English
type_names <- c("Big Centers", "Secondary Centers Of Big Centers", "Crown Big Centers", "Medium Centers", "Crown Medium Centers", "Small Centers", "Peri-urban Rural Communes", "Agricultural Communes", "Tourist Communes")
typ_installed_pot$name <- type_names
ch_installed_pot$NAME <- "Switzerland"
ch_installed_pot <- ch_installed_pot %>%
rename(name = NAME)
# kW --> kWh
# TO CLARIFY: what does this mean?
factor <- 950
ch_gwh_pot <- ch_installed_pot %>%
mutate(gwh_b2005 = kw_b2005 * factor / 1e6,
gwh_2005 = kw_2005 * factor / 1e6,
gwh_2006 = kw_2006 * factor / 1e6,
gwh_2007 = kw_2007 * factor / 1e6,
gwh_2008 = kw_2008 * factor / 1e6,
gwh_2009 = kw_2009 * factor / 1e6,
gwh_2010 = kw_2010 * factor / 1e6,
gwh_2011 = kw_2011 * factor / 1e6,
gwh_2012 = kw_2012 * factor / 1e6,
gwh_2013 = kw_2013 * factor / 1e6,
gwh_2014 = kw_2014 * factor / 1e6,
gwh_2015 = kw_2015 * factor / 1e6,
gwh_2016 = kw_2016 * factor / 1e6,
gwh_2017 = kw_2017 * factor / 1e6,
gwh_2018 = kw_2018 * factor / 1e6,
gwh_2019 = kw_2019 * factor / 1e6,
gwh_2020 = kw_2020 * factor / 1e6,
gwh_2021 = kw_2021 * factor / 1e6,
gwh_2022 = kw_2022 * factor / 1e6,
gwh_tot = kw_tot * factor / 1e6)
cantons_gwh_pot <- cantons_installed_pot %>%
mutate(gwh_b2005 = kw_b2005 * factor / 1e6,
gwh_2005 = kw_2005 * factor / 1e6,
gwh_2006 = kw_2006 * factor / 1e6,
gwh_2007 = kw_2007 * factor / 1e6,
gwh_2008 = kw_2008 * factor / 1e6,
gwh_2009 = kw_2009 * factor / 1e6,
gwh_2010 = kw_2010 * factor / 1e6,
gwh_2011 = kw_2011 * factor / 1e6,
gwh_2012 = kw_2012 * factor / 1e6,
gwh_2013 = kw_2013 * factor / 1e6,
gwh_2014 = kw_2014 * factor / 1e6,
gwh_2015 = kw_2015 * factor / 1e6,
gwh_2016 = kw_2016 * factor / 1e6,
gwh_2017 = kw_2017 * factor / 1e6,
gwh_2018 = kw_2018 * factor / 1e6,
gwh_2019 = kw_2019 * factor / 1e6,
gwh_2020 = kw_2020 * factor / 1e6,
gwh_2021 = kw_2021 * factor / 1e6,
gwh_2022 = kw_2022 * factor / 1e6,
gwh_tot = kw_tot * factor / 1e6)
typ_gwh_pot <- typ_installed_pot %>%
mutate(gwh_b2005 = kw_b2005 * factor / 1e6,
gwh_2005 = kw_2005 * factor / 1e6,
gwh_2006 = kw_2006 * factor / 1e6,
gwh_2007 = kw_2007 * factor / 1e6,
gwh_2008 = kw_2008 * factor / 1e6,
gwh_2009 = kw_2009 * factor / 1e6,
gwh_2010 = kw_2010 * factor / 1e6,
gwh_2011 = kw_2011 * factor / 1e6,
gwh_2012 = kw_2012 * factor / 1e6,
gwh_2013 = kw_2013 * factor / 1e6,
gwh_2014 = kw_2014 * factor / 1e6,
gwh_2015 = kw_2015 * factor / 1e6,
gwh_2016 = kw_2016 * factor / 1e6,
gwh_2017 = kw_2017 * factor / 1e6,
gwh_2018 = kw_2018 * factor / 1e6,
gwh_2019 = kw_2019 * factor / 1e6,
gwh_2020 = kw_2020 * factor / 1e6,
gwh_2021 = kw_2021 * factor / 1e6,
gwh_2022 = kw_2022 * factor / 1e6,
gwh_tot = kw_tot * factor / 1e6)
muns_gwh_pot <- muns_installed_pot %>%
mutate(gwh_b2005 = kw_b2005 * factor / 1e6,
gwh_2005 = kw_2005 * factor / 1e6,
gwh_2006 = kw_2006 * factor / 1e6,
gwh_2007 = kw_2007 * factor / 1e6,
gwh_2008 = kw_2008 * factor / 1e6,
gwh_2009 = kw_2009 * factor / 1e6,
gwh_2010 = kw_2010 * factor / 1e6,
gwh_2011 = kw_2011 * factor / 1e6,
gwh_2012 = kw_2012 * factor / 1e6,
gwh_2013 = kw_2013 * factor / 1e6,
gwh_2014 = kw_2014 * factor / 1e6,
gwh_2015 = kw_2015 * factor / 1e6,
gwh_2016 = kw_2016 * factor / 1e6,
gwh_2017 = kw_2017 * factor / 1e6,
gwh_2018 = kw_2018 * factor / 1e6,
gwh_2019 = kw_2019 * factor / 1e6,
gwh_2020 = kw_2020 * factor / 1e6,
gwh_2021 = kw_2021 * factor / 1e6,
gwh_2022 = kw_2022 * factor / 1e6,
gwh_tot = kw_tot * factor / 1e6)
library(pxR)
# political orientation
raw_data <- (read.px("unprocessed_data/px-x-1702020000_105.px"))
data_df <- as.data.frame(raw_data)
# filtering data, transformation to long format
data_long <- data_df %>%
filter(Jahr == 2019 & !grepl(">>", Bezirk........Gemeinde.........) & Ergebnisse == "Parteistärke in %") %>%
mutate(Gemeinde = substr(Bezirk........Gemeinde........., start=7, stop=1000000)) %>%
select(Partei, value, Gemeinde)
# pivoting to wide format
data_wide <- data_long %>% pivot_wider (
names_from = Partei, values_from=value
)
# replacing NA with 0
data_wide[is.na(data_wide)] <- 0
# Calculation of score, according to http://www.endlich-18.ch/parteien.html
# 1 --> right-wing, -1 --> left wing
Lega = 1
SVP = 0.7
SD = 0.7
MCR = 0.5
BDP = 0.4
EDU = 0.4
FDP = 0.4
LPS = 0.3
CVP = 0
GLP = -0.3
EVP = -0.4
LdU = -0.6
Sol = -0.7
FGA = -0.7
SP = -0.8
CSP = -0.8
GPS = -0.9
POCH = -0.9
PdA = -1
factors <- c(Lega, SVP, SD, MCR, BDP, EDU, FDP, LPS, CVP, GLP, EVP, LdU, Sol, FGA, SP, CSP, GPS, POCH, PdA)
relevant_parties <- data_wide %>%
select("Lega", "SVP", "SD", "MCR", "BDP", "EDU", "FDP", "LPS", "CVP", "GLP", "EVP", "LdU", "Sol.", "FGA", "SP", "CSP", "GPS", "POCH", "PdA")
scores = c()
for (i in 1:nrow(relevant_parties)) {
fractions = unname(unlist(relevant_parties[i,]))
score = fractions %*% factors
scores[i] <- score
}
muns_political <- data_wide %>%
mutate(score = (2 * (scores - min(scores)) / (max(scores) - min(scores))) - 1) %>%
select(Gemeinde, score)
hist(muns_political$score)
# making names comparable and accounting for municipality fusions since 2019
muns_political[muns_political$Gemeinde == "Mühlethurnen",1] <- "Thurnen"
muns_political[muns_political$Gemeinde == "Kirchenthurnen",1] <- "Thurnen"
muns_political[muns_political$Gemeinde == "Lohnstorf",1] <- "Thurnen"
muns_political[muns_political$Gemeinde == "Villaz-Saint-Pierre",1] <- "Villaz"
muns_political[muns_political$Gemeinde == "La Folliaz",1] <- "Villaz"
muns_political[muns_political$Gemeinde == "Corserey",1] <- "Prez"
muns_political[muns_political$Gemeinde == "Noréaz",1] <- "Prez"
muns_political[muns_political$Gemeinde == "Prez-vers-Noréaz",1] <- "Prez"
muns_political[muns_political$Gemeinde == "Arconciel",1] <- "Bois-d'Amont"
muns_political[muns_political$Gemeinde == "Ependes (FR)",1] <- "Bois-d'Amont"
muns_political[muns_political$Gemeinde == "Senèdes",1] <- "Bois-d'Amont"
muns_political[muns_political$Gemeinde == "Gänsbrunnen",1] <- "Welschenrohr-Gänsbrunnen"
muns_political[muns_political$Gemeinde == "Welschenrohr",1] <- "Welschenrohr-Gänsbrunnen"
muns_political[muns_political$Gemeinde == "Rüte",1] <- "Schwende-Rüte"
muns_political[muns_political$Gemeinde == "Schwende",1] <- "Schwende-Rüte"
muns_political[muns_political$Gemeinde == "Donat",1] <- "Muntogna da Schons"
muns_political[muns_political$Gemeinde == "Casti-Wergenstein",1] <- "Muntogna da Schons"
muns_political[muns_political$Gemeinde == "Mathon",1] <- "Muntogna da Schons"
muns_political[muns_political$Gemeinde == "Lohn (GR)",1] <- "Muntogna da Schons"
muns_political[muns_political$Gemeinde == "La Punt-Chamues-ch",1] <- "La Punt Chamues-ch"
muns_political[muns_political$Gemeinde == "Klosters-Serneus",1] <- "Klosters"
muns_political[muns_political$Gemeinde == "Bözen",1] <- "Böztal"
muns_political[muns_political$Gemeinde == "Effingen",1] <- "Böztal"
muns_political[muns_political$Gemeinde == "Elfingen",1] <- "Böztal"
muns_political[muns_political$Gemeinde == "Hornussen",1] <- "Böztal"
muns_political[muns_political$Gemeinde == "Herznach",1] <- "Herznach-Ueken"
muns_political[muns_political$Gemeinde == "Ueken",1] <- "Herznach-Ueken"
muns_political[muns_political$Gemeinde == "Bad Zurzach",1] <- "Zurzach"
muns_political[muns_political$Gemeinde == "Baldingen",1] <- "Zurzach"
muns_political[muns_political$Gemeinde == "Böbikon",1] <- "Zurzach"
muns_political[muns_political$Gemeinde == "Kaiserstuhl",1] <- "Zurzach"
muns_political[muns_political$Gemeinde == "Rekingen (AG)",1] <- "Zurzach"
muns_political[muns_political$Gemeinde == "Rietheim",1] <- "Zurzach"
muns_political[muns_political$Gemeinde == "Rümikon",1] <- "Zurzach"
muns_political[muns_political$Gemeinde == "Wislikofen",1] <- "Zurzach"
muns_political[muns_political$Gemeinde == "Croglio",1] <- "Tresa"
muns_political[muns_political$Gemeinde == "Monteggio",1] <- "Tresa"
muns_political[muns_political$Gemeinde == "Ponte Tresa",1] <- "Tresa"
muns_political[muns_political$Gemeinde == "Sessa",1] <- "Tresa"
muns_political[muns_political$Gemeinde == "Maroggia",1] <- "Val Mara"
muns_political[muns_political$Gemeinde == "Melano",1] <- "Val Mara"
muns_political[muns_political$Gemeinde == "Rovio",1] <- "Val Mara"
muns_political[muns_political$Gemeinde == "Brione (Verzasca)",1] <- "Verzasca"
muns_political[muns_political$Gemeinde == "Corippo",1] <- "Verzasca"
muns_political[muns_political$Gemeinde == "Frasco",1] <- "Verzasca"
muns_political[muns_political$Gemeinde == "Sonogno",1] <- "Verzasca"
muns_political[muns_political$Gemeinde == "Vogorno",1] <- "Verzasca"
muns_political[muns_political$Gemeinde == "Apples",1] <- "Hautemorges"
muns_political[muns_political$Gemeinde == "Bussy-Chardonney",1] <- "Hautemorges"
muns_political[muns_political$Gemeinde == "Cottens (VD)",1] <- "Hautemorges"
muns_political[muns_political$Gemeinde == "Pampigny",1] <- "Hautemorges"
muns_political[muns_political$Gemeinde == "Reverolle",1] <- "Hautemorges"
muns_political[muns_political$Gemeinde == "Sévery",1] <- "Hautemorges"
muns_political[muns_political$Gemeinde == "Crans-près-Céligny",1] <- "Crans (VD)"
muns_political[muns_political$Gemeinde == "Blonay",1] <- "Blonay - Saint-Légier"
muns_political[muns_political$Gemeinde == "Saint-Légier-La Chiésaz",1] <- "Blonay - Saint-Légier"
muns_political[muns_political$Gemeinde == "Bagnes",1] <- "Val de Bagnes"
muns_political[muns_political$Gemeinde == "Vollèges",1] <- "Val de Bagnes"
muns_political[muns_political$Gemeinde == "Miège",1] <- "Noble-Contrée"
muns_political[muns_political$Gemeinde == "Venthône",1] <- "Noble-Contrée"
muns_political[muns_political$Gemeinde == "Veyras",1] <- "Noble-Contrée"
muns_political[muns_political$Gemeinde == "Damphreux",1] <- "Damphreux-Lugnez"
muns_political[muns_political$Gemeinde == "Lugnez",1] <- "Damphreux-Lugnez"
# Group by name and average score
muns_political_corr <- muns_political %>%
dplyr::group_by(Gemeinde) %>%
dplyr::summarize(pol_or = mean(score))
#join with municipalities and cantons
muns_gwh_pot_pol <- inner_join(muns_gwh_pot, muns_political_corr, by = c("name" = "Gemeinde"))
# durchschnitt gewichtet nach einwohnerzahl für aggregation auf kantonsebene
cantons_pol <- muns_gwh_pot_pol %>%
left_join(cantons %>% st_drop_geometry(), by=c("knr.x" = "KANTONSNUM")) %>%
dplyr::group_by(knr.x) %>%
dplyr::summarize(pol_or_unnorm = sum(pop.x / pop.y * pol_or)) %>%
mutate(pol_or = (2 * (pol_or_unnorm - min(pol_or_unnorm)) / (max(pol_or_unnorm) - min(pol_or_unnorm))) - 1) %>%
select(knr.x, pol_or) %>%
st_drop_geometry()
cantons_gwh_pot_pol <- inner_join(cantons_gwh_pot, cantons_pol, by=c("KANTONSNUM" = "knr.x"))
# Saving cantons and muns as point data
muns_pol_point <- muns_gwh_pot_pol %>%
select(BFS_NUMMER, name, pol_or) %>%
mutate(gkode = st_coordinates(st_point_on_surface(geometry))[,1],
gkodn = st_coordinates(st_point_on_surface(geometry))[,2]) %>%
st_drop_geometry() %>%
st_as_sf(., coords=c("gkode", "gkodn"), crs=2056)
cantons_pol_point <- cantons_gwh_pot_pol %>%
select(KANTONSNUM, name, pol_or) %>%
mutate(gkode = st_coordinates(st_point_on_surface(geometry))[,1],
gkodn = st_coordinates(st_point_on_surface(geometry))[,2]) %>%
st_drop_geometry() %>%
st_as_sf(., coords=c("gkode", "gkodn"), crs=2056)
st_write(muns_pol_point, "processed_data/point_data/municipalities_point.shp")
?st_write
# Saving cantons and muns as point data
muns_pol_point <- muns_gwh_pot_pol %>%
select(BFS_NUMMER, name, pol_or) %>%
mutate(gkode = st_coordinates(st_point_on_surface(geometry))[,1],
gkodn = st_coordinates(st_point_on_surface(geometry))[,2]) %>%
st_drop_geometry() %>%
st_as_sf(., coords=c("gkode", "gkodn"), crs=2056)
cantons_pol_point <- cantons_gwh_pot_pol %>%
select(KANTONSNUM, name, pol_or) %>%
mutate(gkode = st_coordinates(st_point_on_surface(geometry))[,1],
gkodn = st_coordinates(st_point_on_surface(geometry))[,2]) %>%
st_drop_geometry() %>%
st_as_sf(., coords=c("gkode", "gkodn"), crs=2056)
st_write(muns_pol_point, "processed_data/point_data/municipalities_point.shp", append=F)
st_write(cantons_pol_point, "processed_data/point_data/cantons_point.shp", append=F)
library(rmapshaper)
?ms_simplify
# TODO: Load and simplify lakes
lakes_unsimp <- st_zm(read_sf("unprocessed_data/lakes/Municipalities/lakes.shp"))
# TODO: Load and simplify lakes
lakes_unsimp <- st_zm(read_sf("unprocessed_data/lakes/lakes.shp"))
# TODO: Load and simplify lakes
lakes_unsimp <- st_zm(read_sf("unprocessed_data/lakes/lakes.shp"))
lakes_simp <- ms_simplify(lakes_unsimp, keep_shapes = F, keep=0.01)
ggplot() +
geom_sf(data= muns_installed_pot_simplified, aes(fill=gwh_tot/p_rf_fac), lwd=0.1) +
geom_sf(data=lakes_simp, aes(fill="blue")) +
theme_void()
# simplfiying geometry (sf)
#muns_installed_pot_simplified <- st_simplify(muns_gwh_pot, preserveTopology = T, dTolerance=250)
#cantons_installed_pot_simplified <- st_simplify(cantons_gwh_pot, preserveTopology = T, dTolerance=250)
#typ_installed_pot_simplified <- st_simplify(typ_gwh_pot, preserveTopology = T, dTolerance=250)
#ch_installed_pot_simplified <- st_simplify(ch_gwh_pot, preserveTopology = T, dTolerance=250)
# simplifying geometry (rmapshaper)
library(rmapshaper)
muns_installed_pot_simplified <- ms_simplify(muns_gwh_pot_pol, keep_shapes = F, keep=0.005)
cantons_installed_pot_simplified <- ms_simplify(cantons_gwh_pot_pol, keep_shapes = F, keep=0.01)
typ_installed_pot_simplified <- ms_simplify(typ_gwh_pot, keep_shapes = F, keep=0.01)
ch_installed_pot_simplified <- ms_simplify(ch_gwh_pot, keep_shapes = F, keep=0.01)
# Load and simplify lakes
lakes_unsimp <- st_zm(read_sf("unprocessed_data/lakes/lakes.shp"))
lakes_simp <- ms_simplify(lakes_unsimp, keep_shapes = F, keep=0.01)
ggplot() +
geom_sf(data= muns_installed_pot_simplified, aes(fill=gwh_tot/p_rf_fac), lwd=0.1) +
geom_sf(data=lakes_simp, aes(fill="blue")) +
theme_void()
ggplot() +
geom_sf(data= muns_installed_pot_simplified, aes(fill=gwh_tot/p_rf_fac), lwd=0.1) +
geom_sf(data=lakes_simp, mapping=aes(), fill="blue") +
theme_void()
# Load and simplify lakes
lakes_unsimp <- st_zm(read_sf("unprocessed_data/lakes/lakes.shp"))
lakes_simp <- ms_simplify(lakes_unsimp, keep_shapes = F, keep=0.001)
ggplot() +
geom_sf(data= muns_installed_pot_simplified, aes(fill=gwh_tot/p_rf_fac), lwd=0.1) +
geom_sf(data=lakes_simp, mapping=aes(), fill="blue") +
theme_void()
# Saving spatial data as shapefiles
st_write(muns_installed_pot_simplified, "processed_data/municipalities/municipalities.shp", append=F)
st_write(cantons_installed_pot_simplified, "processed_data/cantons/cantons.shp", append=F)
st_write(typ_installed_pot_simplified, "processed_data/typology/typology.shp", append=F)
st_write(ch_installed_pot_simplified, "processed_data/switzerland/switzerland.shp", append=F)
st_write(lakes_simp, "processed_data/lakes/lakes.shp", append=F)
# Saving spatial data as shapefiles
st_write(muns_installed_pot_simplified, "processed_data/municipalities/municipalities.shp", append=F)
st_write(cantons_installed_pot_simplified, "processed_data/cantons/cantons.shp", append=F)
st_write(typ_installed_pot_simplified, "processed_data/typology/typology.shp", append=F)
st_write(ch_installed_pot_simplified, "processed_data/switzerland/switzerland.shp", append=F)
#st_write(lakes_simp, "processed_data/lakes/lakes.shp", append=F)
# Saving spatial data as shapefiles
st_write(muns_installed_pot_simplified, "processed_data/municipalities/municipalities.shp", append=F)
st_write(cantons_installed_pot_simplified, "processed_data/cantons/cantons.shp", append=F)
st_write(typ_installed_pot_simplified, "processed_data/typology/typology.shp", append=F)
st_write(ch_installed_pot_simplified, "processed_data/switzerland/switzerland.shp", append=F)
st_write(lakes_simp, "processed_data/lakes/lakes.shp", append=F)
# Check whether data was exported correctly
processed_muns <- st_transform(st_read("processed_data/municipalities/municipalities.shp"), crs=4326)
processed_cantons <-  st_transform(st_read("processed_data/cantons/cantons.shp"), crs=4326)
processed_typ <-  st_transform(st_read("processed_data/typology/typology.shp"), crs=4326)
processed_ch <-  st_transform(st_read("processed_data/switzerland/switzerland.shp"), crs=4326)
# simplfiying geometry (sf)
#muns_installed_pot_simplified <- st_simplify(muns_gwh_pot, preserveTopology = T, dTolerance=250)
#cantons_installed_pot_simplified <- st_simplify(cantons_gwh_pot, preserveTopology = T, dTolerance=250)
#typ_installed_pot_simplified <- st_simplify(typ_gwh_pot, preserveTopology = T, dTolerance=250)
#ch_installed_pot_simplified <- st_simplify(ch_gwh_pot, preserveTopology = T, dTolerance=250)
# simplifying geometry (rmapshaper)
library(rmapshaper)
muns_installed_pot_simplified <- ms_simplify(muns_gwh_pot_pol, keep_shapes = T, keep=0.005)
cantons_installed_pot_simplified <- ms_simplify(cantons_gwh_pot_pol, keep_shapes = T, keep=0.01)
typ_installed_pot_simplified <- ms_simplify(typ_gwh_pot, keep_shapes = T, keep=0.01)
ch_installed_pot_simplified <- ms_simplify(ch_gwh_pot, keep_shapes = T, keep=0.01)
# Load and simplify lakes
lakes_unsimp <- st_zm(read_sf("unprocessed_data/lakes/lakes.shp"))
lakes_simp <- ms_simplify(lakes_unsimp, keep_shapes = T, keep=0.001)
# Saving spatial data as shapefiles
st_write(muns_installed_pot_simplified, "processed_data/municipalities/municipalities.shp", append=F)
st_write(cantons_installed_pot_simplified, "processed_data/cantons/cantons.shp", append=F)
st_write(typ_installed_pot_simplified, "processed_data/typology/typology.shp", append=F)
st_write(ch_installed_pot_simplified, "processed_data/switzerland/switzerland.shp", append=F)
st_write(lakes_simp, "processed_data/lakes/lakes.shp", append=F)
# Check whether data was exported correctly
processed_muns <- st_transform(st_read("processed_data/municipalities/municipalities.shp"), crs=4326)
processed_cantons <-  st_transform(st_read("processed_data/cantons/cantons.shp"), crs=4326)
processed_typ <-  st_transform(st_read("processed_data/typology/typology.shp"), crs=4326)
processed_ch <-  st_transform(st_read("processed_data/switzerland/switzerland.shp"), crs=4326)
library(shiny); runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
?highlightOptions
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
?highlightOptions
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
?bringToTop
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
?addPolygons
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
runApp('geo454_solar_energy.R')
library(shiny); runApp('geo454_solar_energy.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(sf)
library(dplyr)
library(ggplot2)
library(data.table)
#library(rmapshaper)
#library(pxR)
#library(tidyr)
# Loading the data
ch <- st_zm(read_sf("unprocessed_data/boundaries/Switzerland/switzerland.shp"))
cantons_unproc <- st_zm(read_sf("unprocessed_data/boundaries/Cantons/cantons.shp"))
muns_unproc <- st_zm(read_sf("unprocessed_data/boundaries/Municipalities/municipalities.shp"))
typology_unproc <- st_make_valid(st_zm(read_sf("unprocessed_data/boundaries/Typology/mun_typology.shp")))
ele_prod_plants_csv <- read.csv("unprocessed_data/ElectricityProductionPlant.csv")
potentials <- read.csv("unprocessed_data/Solarenergiepotenziale_Gemeinden_Daecher_und_Fassaden.csv")
gdeverzeichnis <- read.csv("unprocessed_data/help/PLZO_CSV_LV95.csv", sep=";")
statpop <- read.csv("unprocessed_data/help/volkszaehlung-bevoelkerungsstatistik_einwohner_2021_2056.csv", sep=";")
statpop_sf <- st_as_sf(statpop, coords=c("E_KOORD", "N_KOORD"), crs=2056)
# Creating multipart features from single-part features of boundaries
cantons <- cantons_unproc %>%
group_by(KANTONSNUM) %>%
summarize(name=max(NAME), pop=sum(EINWOHNERZ), geometry = st_union(geometry))
muns <- muns_unproc %>%
# removing municipalities in Liechtenstein
filter(BFS_NUMMER < 7000) %>%
group_by(BFS_NUMMER) %>%
summarize(name=max(NAME), knr = max(KANTONSNUM), pop=sum(EINWOHNERZ), geometry = st_union(geometry))
